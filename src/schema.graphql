input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreateDiscussionInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}

input UpdateDiscussionInput {
  title: String
  body: String
  published: Boolean
  authorId: ID
}

input CreateCommentInput {
  text: String!
  authorId: ID!
  discussionId: ID!
}

input UpdateCommentInput {
  text: String
  authorId: ID
  discussionId: ID
}

input CreateMessageInput {
  text: String!
  authorId: ID!
  recipientId: ID!
}

input UpdateMessageInput {
  text: String
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(id: ID!, data:UpdateUserInput!): User!
  deleteUser(id: ID!): User!

  createDiscussion(data: CreateDiscussionInput!): Discussion!
  updateDiscussion(id: ID!, data: UpdateDiscussionInput!): Discussion!
  deleteDiscussion(id: ID!): Discussion!

  createRootComment(data: CreateCommentInput!): Comment!
  createChildComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data:UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!

  createMessage(data: CreateMessageInput!): Message!
  updateMessage(id: ID!, data: UpdateMessageInput!): Message!
  deleteMessage(id: ID!): Message!
}

type Query {
  users(query: String): [User!]!
  discussions(query: String): [Discussion!]!
  comments(query: String): [Comment!]!
  messages: [Message!]!
  getDiscussion(id: ID!): Discussion!
  getUser(id: ID!): User!
  getComment(id: ID!): Comment!
  getMessage(id: ID!): Message!
}

type Subscription {
  count: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  discussions: [Discussion]
  comments: [Comment]
  sentMessages: [Message]
  receivedMessages: [Message]
}

type Discussion {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  authorId: User!
  rootComments: [Comment]!
}

type Comment {
  id: ID!
  text: String!
  authorId: User!
  discussionId: Discussion!
  parentCommentId: ID
  childComments: [Comment]!
}

type Message {
  id: ID!
  text: String!
  authorId: User!
  recipientId: User!
  createdDate: String!
  updatedDate: String
}